This file contains the plain text to use with planUml (https://plantuml.com/fr/) to generate the uml diagram



diagram needed for all parts (we need 10 diagrams): 
- cas d'utilisation ✅
- class ✅
- séquence 
- état-transition (2) ✅(1/2)

@startuml diagrammeClassePart1 
title digramme classe partie 1
class Robot {
    {static}+ BEST_RUN: String
    -config : HashMap<String, Double>
    -direction :Direction
    -laser : Laser
    -battery : Battery
    -map : Map
    -posX: int
    -posY: int
    -value : double
    -weightCarried: double
    {static}+ FILES_MATERIAL_MATERIAL_LIST_1_TXT: String
    {static}+ FILES_RESULTS_CURRENT_NUMBER: String
    {static} +PATH_TO_IMAGE: String
    {static} + ACCELERATION_FACTOR: int
    {static} + CHEMIN_CONFIG: String
    +Robot(): Robot
    +Robot(configPath: String): Robot
    +Robot(map: Map, configPath: String): Robot
    +getDirection(): Direction
    +getPosX(): int
    +getPosY(): int
    +getValue(): double
    +getLaser() : Laser
    +getBattery(): Battery
    +getWeightCarried(): double
    + getConfig(): HashMap<String, double>
    +{static} getConfig(path: String): HashMap<String, double>
    +rotate(direction: Direction): void
    +move(): void
    +performAction(instructions: String...): void
    +{static} getActionFromFile(path: String): String[]
    +mine(): void
    +gameover(): void
    +writeInResult(resultToWrite: String): void
    +getActionDuration(action: String)
    +buyMaterial(materialName: String): void
    +{static} startGame(): void
    -{static} getCurrentRunNumber(): int
    -{static} setCurrentNumber(): void
    +getBestPath(nbIteration: int): String[]
}

class Material {
    -object: Object
    -cost: int
    +Material(object: Object, cost: int): Material
    +Material(name: String, path: String): Material
    +getDefault(): Material[]
    +getAllMaterial(path: String): ArrayList<Material>
    +isLaser(name String): boolean
    +isBattery(name: String): boolean
    +getName(): String
    +getCost(): int
    +getObject(): Object
    +getMaterialAttributes(path: String, name: String, attribute: String): int
}

class Battery {
    -name: String
    -capacity: double
    -level: double
    +Battery()
    +Battery(name: String, capacity: double)
    +Battery(name String, capacity: double, level: double)
    +chargeBattery(power: double): void
    +useBattery(power: double): void
    +getImageName(): String
    +getLevel(): double
    +getCapacity(): double
    +getName(): String
    -emptyBattery(): void

}
enum Direction {
    NORTH
    EAST
    SOUTH
    WEST
}

class Laser {
    -name: String
    -power: double
    +Laser()
    +Laser(name: String, power: double)
    +getPower(): double
    +loosePower(time: long, blunt: double)
}

class Map {
    -representation: char[][]
    -sizeX: int
    -sizeY: int
    -map: MapObject[][]
    +Map()
    +Map(representation: char[][])
    +generateObjects(): void
    +getRepresentation(): char[][]
    +getRepresentation(filePath: String, sizeX: int, sizeY: int): void
    +getSizeX(): int
    +getSizeY(): int
    +getObject(posX: int, posY: int): MapObject
    +setObject(posX: int, posY: int, mapObject: MapObject)
    +getBase(): MapObject
}

class MapObject {
    -posX: int
    -posY: int
    -name: String
    +mapRepresentation: char
    +MapObject(posX: int, posY: int, name: String, mapRepresentation: char)
    +MapObject(posX: int, posY: int, mapReprensation: char)
    +getName(): String
    +getName(representation: char): String
    +getPosX(): int
    +getPosY(): int
    +getAttribute(element: String): int
    +destroy(): void
    -readMapObjectsFile(path: String): String[]
}

Robot *-- Battery
Robot *-- Laser
Robot o-- Map
Map o-- MapObject
Material -- Laser
Material -- Battery
Robot o-- Direction
@enduml

diagram cas
@startuml digramCasPart1
title Diagramme cas partie 1
:robot: as robot
rectangle Projet {
robot --(pointer une direction)
(avancer) as (avancer)
(miner) as (miner)
(avancer) ..> (miner): include
robot --(avancer)
(acheter nouveaux équipement) as (acheter)
(installer nouveaux équipement) as (installer)
robot -- (acheter)
(acheter) ..> (installer): include
}
@enduml

Diagram etat-transition (bouger robot)

@startuml digrammeEtatTransition_bougerRobot
title diagramme etat transition bouger robot
[*] --> bougerRobot 
state bougerRobot {
    state Avancer: after(temps déplacement)
    [*] --> Avancer
    Avancer --> miner : [position = position d'un objet]
    Avancer --> [*]
    state miner {
        [*] --> mine 
        mine : after(dureté *100 / efficacité)
        mine --> [*]
    }
    miner -> [*] : [charge robot > charge max]
    miner --> robotDetruit : [batterie <= 0]
}
@enduml

digramm sequence 

@startuml diagrammeSequencePart1
!pragma teoz true
title diagramme sequence partie 1
actor Robot as Robot <<Robot>>
participant Map as Map <<Map>>

Robot -> Map : avancer(direction)
alt position valide
Map --> Robot : nouvelle position
Robot -> Map : objet à la position ? 

alt oui 

Map --> Robot: caractéristique de l'objet
Robot -> Robot ++: mine
deactivate Robot
Robot -> Map : j'ai détruit l'objet

Map -> Map : enlève l'objet de la map
else non
activate Robot
Map --> Robot : case vide
deactivate Robot


end
else position non disponible
Map --> Robot : en dehors de la map\nfin du jeu
destroy Robot

end
@enduml

diagram etat-transition (acheter Materiel - part1)

@startuml diagrammeEtatTransition_acheterMateriel
title diagramme etat transition acheter matériel
[*] --> AcheterMateriel
state AcheterMateriel {
    [*] --> DemandeMateriel
    state c <<choice>>
    DemandeMateriel --> c : [position robot == position base]

    c --> [*] : [non]
    c --> AcheterEquipement : [oui]

    state d <<choice>>
    AcheterEquipement --> d : [robot.value >= materiel.cost]
    d --> [*] : [non]
    d --> EquiperMateriel : [oui]
    EquiperMateriel : entry/robot.value -= materiel.cost
    EquiperMateriel : after(temps_installation)
    EquiperMateriel --> [*]

}
@enduml

diagramme cas (part2)
@startuml diagrammCasPart2
title Diagramme cas partie 2
actor :robot:
rectangle programme {
    left to right direction
robot -- (Instruction P)
robot -- (Instruction G)
robot -- (Instruction D)
robot -- (Instruction M)
robot -- (Instruction K)
robot -- (Déplacer le robot)
robot -- (Attaquer robot à proximité)
robot -- (Soigner robot)
robot -- (Détruire mur)

"Instruction Y" as (Y)
(Déplacer le robot) ..> (Y) : include
(Attaquer robot à proximité) ..> (Y) : include
(Soigner robot) ..> (Y) : include
(Détruire mur) ..> (Y) : include

}
@enduml

diagramme etat transition partie 2 
@startuml
title diagramme etat transition instruction Y (part2)
state c <<choice>>
state RobotDetruit
[*] --> c : instruction Y
c --> bougerRobot : [32 <= V <= 35]
state bougerRobot {
[*] --> Nord : [V == 33]
[*] --> Est : [V == 32]
[*] --> Ouest : [V == 34]
[*] --> Sud : [V == 35]
state d <<choice>>
Nord --> d 
Est --> d
Ouest --> d
Sud --> d 
d --> [*] : bougeRobot [pas de mur]
}
bougerRobot --> [*] : [mur dans la direction voulu]

c --> attaquerRobots : [V == 36]
state attaquerRobots {
    [*] --> energieInitiale
    energieInitiale --> energieFinale : attaque/energie --
    energieFinale  --> [*]
    energieFinale --> RobotDetruit : [energie <= 0]
}
attaquerRobots --> [*]
c --> soignerRobots : [V == 37]
state soignerRobots {
    [*] --> energieRobotInitiale
    [*] --> energieBotsInitiale
    energieRobotInitiale --> energieRobotFinale : soigner/ [energie += nbBots]
    energieBotsInitiale --> energieBotsFinale : soigner/ [energie += 2]
    energieBotsFinale --> [*]
    energieRobotFinale --> [*]
}
soignerRobots --> [*]

c --> détruireMur : [V == 38]
state détruireMur {
    [*] --> energieRobotDébut
    energieRobotDébut --> energieRobotFin : détruitMur/ énergie -= nbMur
    energieRobotFin --> [*]
    energieRobotFin --> RobotDetruit : [energie <= 0]
}
détruireMur --> [*]
@enduml

digramme sequence partie 2
@startuml diagrammeSequencePart2
title diagramme sequence part2
actor robot as robot <<Robot>>
participant "Registre D" as D <<int[]>>
participant "Registre C" as C <<int[]>>
participant "Pile publique" as PP <<int[]>>
participant Map as Map <<Map>>
alt "Instruction P"
    D -> PP : donne valeur ASCII position d
    PP -> PP : empile la valeur
else "Instructin G"
    PP -> PP : dépile x
    PP->PP: x %= 2
    PP->PP : dépile y
    PP -> PP : y %= 2
    PP->PP : empile x &= y
else "Instruction D"
    D -> PP : récupère dernière valeur
    PP --> D : donne dernière valeur
    D -> D : définit D sur la \nvaleur récupérée
else "Instruction M"
    D -> PP : demande dernière valeur
    PP --> D : donne dernière valeur
    D -> D : défninit valeur à \nla position d \nà la valeur récupérée
else "Instruction K"
    C -> D : demande d
    D --> C : donne d
    C -> C : C = d
    D -> D : D = 0
    newpage
else "Instruction Y"
    opt "V == 32"
        robot -> Map : position à droite disponible ?
        opt 
            Map --> robot : oui
            robot -> robot : reste à la même position
        else 
            Map --> robot : non
            robot -> robot : Déplace à droite
        end
    else "V == 33"
        robot -> Map : position en haut disponible ?
        opt 
            Map --> robot : oui
            robot -> robot : reste à la même position
        else 
            Map --> robot : non
            robot -> robot : Déplace en haut
        end
    else "V == 34"
        robot -> Map : position à gauche disponible ?
        
        opt 
            Map --> robot : oui
            robot -> robot : reste à la même position
        else 
            Map --> robot : non
            robot -> robot : Déplace à gauche
        end
    else "V == 35"
        robot -> Map : position en bas disponible ?
        opt 
            Map --> robot : oui
            robot -> robot : reste à la même position
        else 
            Map --> robot : non
            robot -> robot : Déplace à bas
        end
    else "V == 36"
        robot -> robot : Perd 1 point énergie
        opt "énergie <= 0"
            robot -> robot : Destruction
            destroy robot
        end
    else "V == 37"
        robot -> Map : robots à côté ?
        Map --> robot : nombre robot
        robot -> robot : Gagne (nombre robot) point énergie
        opt energie > 10
            robot -> robot : energie = 10
        end
    else "V == 38"
        robot-> Map : nombre mur à côté ? 
        Map --> robot : nombre mur
        Map -> Map : détruit mur
        robot -> robot : Perd (nombre mur) point énergie
        opt "énergie <= 0"
            robot -> robot : Destruction
            destroy robot
        end 
    end
    newpage
else "instruction I"
    PP -> PP : dépile x, y
    PP -> Map : demande valeur position (x, y)
    Map --> PP : donne valeur position (x, y)
    PP -> PP : empile valeur récupérée
else "Instruction inconnue"
    robot -> robot : Destruction
    destroy robot
end 
@enduml

diagramme classe partie 2 
@startuml diagramClassPart2
title Diagramme classe partie 2




package combat {
    package robot {
        class Robot
        class PublicStack
    }
    package map {
        class CombatMap
        class IsNotARobotException
        enum Direction{
            NORTH, SOUTH, WEST, EAST
        }
    }
    class Display
}

class Robot {
    -energy : int
    -posY : int
    -posX : int
    - C :int
    -D: int
    -commandLog : int[]
    -name: String
    +Robot(chosenName : String, posX: int, posY: int): Robot 
    +getPosY(): int
    +getPoxX(): int
    +getCommand(): int
    +getCLogAsString(): String
    +getName(): String
    +getEnergy(): int
    +getCommandTotal(): int
    +initBot(name: String): void 
    +executeCommand(): void
    +moveRobot(dir: Direction): void
    +addEnergy(value: int): void
}

class PublicStack {
    - stack: int[]
    -p: int
    - {static} instance: PublicStack
    + {static} getInstance(): PublicStack
    - PublicStack()
    +getP(): int
    +getSatck(pos: int): int
    +setStack(value: int): void
    +stack(value :int): void
    +unStack(): int
}

class CombatMap {
    -path: String
    -sizeX: int
    -sizeY: int
    -energy_battery_value: int
    -robotsNames: ArrayList<String>
    -map: char[][]
    -robots: ArrayList<Robot>
    - {static} turnCount: int
    -{static} MAX_TURN: int
    -{static} instance: CombatMap
    {static}+getInstance(): CombatMap
    -CombatMap()
    +getSizeX(): int
    +getSizeY(): int
    +getMap(): char[][]
    +getRobots(): ArrayList<Robots>
    +displayMap(): void
    +getChar(x: int, y: int): char
    +setChat(x: int, y: int, c: char): void
    +moveContent(x1: int, y1: int, x2: int, y2: int): boolean
    +damageRobots(x: int, y: int): void
    +rechargeRobots(x: int, y: int): void
    +remainingBots(): void
    +destroyWalls(x: int, y: int): void
    +destroyRobots(x: int, y: int)
    +isPosValid(x: int, y: int): boolean
    +getRobot(x: int, y: int) :Robot
    +getLongestCommand(): int
}

class Display {
    +{static} main:(args: String[]): void
    +{static} pane: GridPane
    +{static} map: CombatMap
    +{static} block_size: int
    +{static} STAGE_HEIGHT: int
    +{static} STAGE_WIDTH: int
    +{static} WAIT_BETWEEN_ACTIONS: int
    +{static} generateTexture(x: int, y: int): void
    - {static} getPathFromPos(x: int, y: int): String
    +{static} makeActions(): void
    +{static} updateElement(x: int, y: int): void
    +start(primaryStage: Stage): void
    +{static} performActions(rbs: ArrayList<Robot>): void
    +{static} waitAMoment(): void
}



Display --|> Application
IsNotARobotException --|> Exception
Display *-- CombatMap
CombatMap *-- Robot
Robot -- Direction


@enduml


