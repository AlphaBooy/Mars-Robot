This file contains the plain text to use with planUml (https://plantuml.com/fr/) to generate the uml diagram

diagram needed : 
- cas d'utilisation 
- class
- séquence 
- état-transition (2)


diagram class
@startuml
class Robot {
-config : HashMap<String, Double>
-direction :Direction
-laser : Laser
-battery : Battery
-map : Map
-posX: int
-posY: int
-value : double
-weightCarried: double
{static} +PATH_TO_IMAGE: String
+Robot(configPath: String)
+Robot(map: Map, configPath: String)
+getDirection(): Direction
+getPosX(): int
+getPosY(): int
+getValue(): double
+getLaser() : Laser
+getBattery(): Battery
+getWeightCarried(): double
+{static} getConfig: HashMap<String, double>
+rotate(direction: Direction): void
+move(): void
+performAction(instructions: String...): void
+{static} getActionFromFile(path: String): String[]
+mine(): void
+gameover(): void
+writeInResult(resultToWrite: String): void
+getActionDuration(action: String)
+{static} startGame(): void
-{static} getCurrentRunNumber(): int
-{static} setCurrentRunNumber(): void
}

class Material {
-object: Object
-cost: int
+Material(object: Object, cost: int)
+getDefault(): Material[]
+getAllMaterial(path: String): ArrayList<Material>
+isLaser(name String): boolean
+isBattery(name: String): boolean
+getName(): String
+getObject(): Object
}

class Battery {
-name: String
-capacity: double
-level: double
+Battery()
+Battery(name: String, capacity: double)
+Battery(name String, capacity: double, level: double)
+chargeBattery(power: double): void
+useBattery(power: double): void
+getImageName(): String
-emptyBattery(): void

}
enum Direction {
NORTH
EAST
SOUTH
WEST
}

class Laser {
-name: String
-power: double
+Laser()
+Laser(name: String, power: double)
+getPower(): double
+loosePower(time: long, blunt: double)
}

class Map {
-representation: char[][]
-sizeX: int
-sizeY: int
-map: MapObject[][]
+Map()
+Map(sizeX: int, sizeY: int)
+Map(representation: char[][])
+generateObjects(): void
+getRepresentation(): char[][]
+getRepresentation(filePath: String, sizeX: int, sizeY: int): void
+getSizeX(): int
+getSizeY(): int
+getObject(posX: int, posY: int): MapObject
+setObject(posX: int, posY: int, mapObject: MapObject)
+getBase(): MapObject
}

class MapObject {
-posX: int
-posY: int
-name: String
+mapRepresentation: char
+MapObject(posX: int, posY: int, name: String, mapRepresentation: char)
+MapObject(posX: int, posY: int, mapReprensation: char)
+getName(): String
+getName(representation: char): String
+getPosX(): int
+getPosY(): int
+getAttribute(element: String): int
+destroy(): void
{static}+ getObject(posX: int, posY: int): MapObject
}

Robot *-- Battery
Robot *-- Laser
Robot o-- Map
Map o-- MapObject
Material <|-- Laser
Material <|-- Battery
Robot o-- Direction
@enduml


diagram cas
@startuml
:robot: as robot
rectangle Projet {
robot -(pointer une direction)
robot - (revenir à la base)
(décharger les objets) as (décharger)
robot -- (décharger)
(avancer) as (avancer)
(miner) as (miner)
(avancer) <. (miner): include
robot -(avancer)
robot - (miner)
(installer nouveaux équipement) as (acheter)
robot -- (acheter)
(acheter) .> (décharger): include
}
@enduml

Diagram etat-transition (bouger robot)

@startuml
[*] --> bougerRobot 
state bougerRobot {
state Avancer: after(temps déplacement)
[*] --> Avancer
Avancer --> miner : [position = position d'un objet]
Avancer --> [*]
state miner {
[*] --> mine 
mine : after(durreté *100 / efficacité)
mine --> [*]
}
miner -> [*] : [charge robot > charge max]
miner --> [*] : [batterie <= 0]
}
@enduml

